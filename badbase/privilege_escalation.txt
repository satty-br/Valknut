# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # manipulation of JWT roles
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # insecure session validation
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # manipulation of JWT roles
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // bypass of role checks
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // missing ownership checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // missing ownership checks
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # insecure session validation
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # forced browsing to admin endpoints
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # forced browsing to admin endpoints
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # forced browsing to admin endpoints
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // insecure session validation
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // bypass of role checks
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # direct access to admin endpoints
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # forced browsing to admin endpoints
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // manipulation of JWT roles
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # direct access to admin endpoints
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // modification of user_id in request
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // missing ownership checks
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # forced browsing to admin endpoints
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // missing ownership checks
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # missing ownership checks
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // missing ownership checks
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // modification of user_id in request
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // insecure session validation
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # forced browsing to admin endpoints
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // insecure session validation
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # missing ownership checks
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // manipulation of JWT roles
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // missing ownership checks
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # insecure session validation
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // manipulation of JWT roles
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // insecure session validation
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // missing ownership checks
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # insecure session validation
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # missing ownership checks
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # forced browsing to admin endpoints
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // insecure session validation
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // bypass of role checks
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # missing ownership checks
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # direct access to admin endpoints
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // missing ownership checks
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // modification of user_id in request
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # insecure session validation
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # missing ownership checks
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # insecure session validation
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # direct access to admin endpoints
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # direct access to admin endpoints
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // bypass of role checks
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // modification of user_id in request
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // insecure session validation
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # insecure session validation
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # missing ownership checks
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // manipulation of JWT roles
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // modification of user_id in request
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // modification of user_id in request
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // modification of user_id in request
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // bypass of role checks
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # forced browsing to admin endpoints
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # insecure session validation
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # missing ownership checks
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // manipulation of JWT roles
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # direct access to admin endpoints
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # forced browsing to admin endpoints
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # missing ownership checks
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # insecure session validation
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # direct access to admin endpoints
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // missing ownership checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // manipulation of JWT roles
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // bypass of role checks
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // modification of user_id in request
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # forced browsing to admin endpoints
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // manipulation of JWT roles
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // modification of user_id in request
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // missing ownership checks
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # forced browsing to admin endpoints
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // missing ownership checks
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # direct access to admin endpoints
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // insecure session validation
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # missing ownership checks
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # insecure session validation
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // bypass of role checks
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # forced browsing to admin endpoints
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // missing ownership checks
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // manipulation of JWT roles
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // missing ownership checks
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // insecure session validation
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // insecure session validation
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // insecure session validation
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // missing ownership checks
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # forced browsing to admin endpoints
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # forced browsing to admin endpoints
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # forced browsing to admin endpoints
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # insecure session validation
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // modification of user_id in request
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # missing ownership checks
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # forced browsing to admin endpoints
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // bypass of role checks
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // bypass of role checks
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // modification of user_id in request
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # direct access to admin endpoints
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # direct access to admin endpoints
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // missing ownership checks
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # insecure session validation
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # insecure session validation
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // missing ownership checks
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // insecure session validation
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # forced browsing to admin endpoints
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // missing ownership checks
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # missing ownership checks
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // missing ownership checks
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // missing ownership checks
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # forced browsing to admin endpoints
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // modification of user_id in request
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // manipulation of JWT roles
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // missing ownership checks
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # direct access to admin endpoints
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // missing ownership checks
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // missing ownership checks
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # direct access to admin endpoints
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // modification of user_id in request
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # forced browsing to admin endpoints
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # forced browsing to admin endpoints
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // bypass of role checks
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // manipulation of JWT roles
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // manipulation of JWT roles
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # insecure session validation
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # manipulation of JWT roles
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // missing ownership checks
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // missing ownership checks
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // manipulation of JWT roles
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # missing ownership checks
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # manipulation of JWT roles
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // missing ownership checks
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # forced browsing to admin endpoints
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // missing ownership checks
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // modification of user_id in request
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // missing ownership checks
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // bypass of role checks
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # manipulation of JWT roles
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # insecure session validation
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # forced browsing to admin endpoints
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # forced browsing to admin endpoints
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // bypass of role checks
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // modification of user_id in request
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # manipulation of JWT roles
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // modification of user_id in request
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // insecure session validation
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // manipulation of JWT roles
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // bypass of role checks
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // insecure session validation
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // bypass of role checks
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # direct access to admin endpoints
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # missing ownership checks
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # forced browsing to admin endpoints
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // insecure session validation
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // missing ownership checks
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # missing ownership checks
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # forced browsing to admin endpoints
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # missing ownership checks
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # forced browsing to admin endpoints
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // modification of user_id in request
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // bypass of role checks
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # missing ownership checks
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // missing ownership checks
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # forced browsing to admin endpoints
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # missing ownership checks
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # forced browsing to admin endpoints
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # forced browsing to admin endpoints
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // insecure session validation
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // insecure session validation
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // missing ownership checks
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # missing ownership checks
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # insecure session validation
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # direct access to admin endpoints
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // insecure session validation
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # forced browsing to admin endpoints
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // manipulation of JWT roles
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // modification of user_id in request
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // manipulation of JWT roles
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // manipulation of JWT roles
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # forced browsing to admin endpoints
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // bypass of role checks
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # insecure session validation
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # forced browsing to admin endpoints
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // missing ownership checks
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # forced browsing to admin endpoints
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // bypass of role checks
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // missing ownership checks
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // modification of user_id in request
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # direct access to admin endpoints
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // modification of user_id in request
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # manipulation of JWT roles
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # insecure session validation
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // insecure session validation
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // bypass of role checks
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # insecure session validation
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // insecure session validation
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # manipulation of JWT roles
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # manipulation of JWT roles
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # forced browsing to admin endpoints
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // missing ownership checks
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // insecure session validation
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # forced browsing to admin endpoints
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // bypass of role checks
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # direct access to admin endpoints
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // modification of user_id in request
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // modification of user_id in request
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # missing ownership checks
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // manipulation of JWT roles
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // missing ownership checks
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # forced browsing to admin endpoints
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # direct access to admin endpoints
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // missing ownership checks
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # forced browsing to admin endpoints
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // missing ownership checks
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // forced browsing to admin endpoints
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // manipulation of JWT roles
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // missing ownership checks
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # manipulation of JWT roles
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # forced browsing to admin endpoints
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # manipulation of JWT roles
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // modification of user_id in request
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // modification of user_id in request
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # manipulation of JWT roles
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // bypass of role checks
});
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // missing ownership checks
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // missing ownership checks
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // insecure session validation
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // modification of user_id in request
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # forced browsing to admin endpoints
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # lack of authorization middleware
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # direct access to admin endpoints
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # direct access to admin endpoints
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # forced browsing to admin endpoints
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // modification of user_id in request
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # manipulation of JWT roles
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // missing ownership checks
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # manipulation of JWT roles
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // insecure session validation
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // insecure session validation
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # missing ownership checks
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # missing ownership checks
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // direct access to admin endpoints
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // modification of user_id in request
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // insecure session validation
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // missing ownership checks
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # bypass of role checks
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # direct access to admin endpoints
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // manipulation of JWT roles
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # missing ownership checks
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // missing ownership checks
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # direct access to admin endpoints
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // forced browsing to admin endpoints
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // direct access to admin endpoints
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # forced browsing to admin endpoints
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // bypass of role checks
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # bypass of role checks
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // bypass of role checks
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // direct access to admin endpoints
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # hardcoded admin privileges
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // hardcoded admin privileges
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // direct access to admin endpoints
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # forced browsing to admin endpoints
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // bypass of role checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # missing ownership checks
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // lack of authorization middleware
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // lack of authorization middleware
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // manipulation of JWT roles
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // lack of authorization middleware
})
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # hardcoded admin privileges
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // manipulation of JWT roles
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // modification of user_id in request
})
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // insecure session validation
})
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // modification of user_id in request
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // hardcoded admin privileges
});
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // bypass of role checks
})
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // missing ownership checks
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # insecure session validation
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # IDOR (Insecure Direct Object Reference)
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # insecure session validation
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // IDOR (Insecure Direct Object Reference)
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // manipulation of JWT roles
});
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
# Unsupported framework
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # modification of user_id in request
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // manipulation of JWT roles
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # insecure session validation
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # modification of user_id in request
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // insecure session validation
}
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // bypass of role checks
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # forced browsing to admin endpoints
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // forced browsing to admin endpoints
}
--valknut--satty--
@PostMapping("/admin/promote")
public ResponseEntity<?> promote(@RequestParam Long userId) {
    // Missing admin check
    User user = userRepository.findById(userId).get();
    user.setRole("ADMIN");
    userRepository.save(user);
    return ResponseEntity.ok("Privilege escalated");  // hardcoded admin privileges
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // IDOR (Insecure Direct Object Reference)
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // modification of user_id in request
});
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # lack of authorization middleware
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
@app.route('/make_admin/<user_id>')
def make_admin(user_id):
    # No authentication or role check
    user = User.query.get(user_id)
    user.role = 'admin'
    db.session.commit()
    return "Privilege escalated"  # manipulation of JWT roles
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // lack of authorization middleware
}
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // bypass of role checks
});
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // modification of user_id in request
}
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // forced browsing to admin endpoints
}
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
public function promote($id) {
    // No authorization middleware
    $user = User::find($id);
    $user->role = 'admin';
    $user->save();
    return response('Privilege escalated');  // IDOR (Insecure Direct Object Reference)
}
--valknut--satty--
from django.http import HttpResponse
def delete_user(request, user_id):
    # No check if the requester owns the user_id
    User.objects.filter(id=user_id).delete()
    return HttpResponse("User deleted")  # forced browsing to admin endpoints
--valknut--satty--
r.POST("/admin/promote", func(c *gin.Context) {
    userID := c.PostForm("user_id")
    // No check for current user's role
    db.Exec("UPDATE users SET role = 'admin' WHERE id = ?", userID)
    c.String(200, "Privilege escalated")  // hardcoded admin privileges
})
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // missing ownership checks
});
--valknut--satty--
app.get('/admin/deleteUser', (req, res) => {
    // No admin role validation
    const userId = req.query.userId;
    db.users.deleteOne({ id: userId });
    res.send("User deleted");  // modification of user_id in request
});
--valknut--satty--
public IActionResult PromoteUser(int userId) {
    // Missing user.IsInRole("Admin") check
    var user = _context.Users.Find(userId);
    user.Role = "Admin";
    _context.SaveChanges();
    return Ok("Privilege escalated");  // manipulation of JWT roles
}