public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // exposing database errors to users
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // printing environment variables to output
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // insecure redirect with user-controlled URL
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // printing environment variables to output
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // debug mode exposing secrets
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // debug mode exposing secrets
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking stack traces in responses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // debug mode exposing secrets
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // printing environment variables to output
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal usernames or IDs
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // echoing back request headers
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking stack traces in responses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // printing environment variables to output
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // debug mode exposing secrets
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // printing environment variables to output
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // printing environment variables to output
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // printing environment variables to output
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal IP addresses
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking stack traces in responses
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // echoing back request headers
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # printing environment variables to output
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // echoing back request headers
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // insecure redirect with user-controlled URL
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending sensitive data to external API
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // exposing database errors to users
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking stack traces in responses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking stack traces in responses
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal usernames or IDs
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending sensitive data to external API
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # printing environment variables to output
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // printing environment variables to output
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking stack traces in responses
});
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal usernames or IDs
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // exposing database errors to users
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // printing environment variables to output
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal IP addresses
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking stack traces in responses
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // insecure redirect with user-controlled URL
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // debug mode exposing secrets
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // printing environment variables to output
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // exposing database errors to users
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking stack traces in responses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // printing environment variables to output
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // echoing back request headers
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // debug mode exposing secrets
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // debug mode exposing secrets
});
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking stack traces in responses
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // insecure redirect with user-controlled URL
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal usernames or IDs
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking stack traces in responses
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking stack traces in responses
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending sensitive data to external API
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking stack traces in responses
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking stack traces in responses
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking stack traces in responses
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # exposing database errors to users
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking stack traces in responses
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking stack traces in responses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking stack traces in responses
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // debug mode exposing secrets
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal usernames or IDs
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // insecure redirect with user-controlled URL
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // printing environment variables to output
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking stack traces in responses
});
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking stack traces in responses
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking stack traces in responses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // printing environment variables to output
});
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // debug mode exposing secrets
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // printing environment variables to output
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking stack traces in responses
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending sensitive data to external API
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal usernames or IDs
});
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking stack traces in responses
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // echoing back request headers
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // debug mode exposing secrets
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // exposing database errors to users
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal usernames or IDs
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal usernames or IDs
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // echoing back request headers
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # printing environment variables to output
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal IP addresses
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking stack traces in responses
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal usernames or IDs
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # exposing database errors to users
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending sensitive data to external API
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking stack traces in responses
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // printing environment variables to output
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # printing environment variables to output
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // debug mode exposing secrets
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal usernames or IDs
});
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // insecure redirect with user-controlled URL
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // echoing back request headers
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // printing environment variables to output
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking stack traces in responses
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // echoing back request headers
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking stack traces in responses
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // exposing database errors to users
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // debug mode exposing secrets
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending sensitive data to external API
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking stack traces in responses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking stack traces in responses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal usernames or IDs
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking stack traces in responses
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking stack traces in responses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // debug mode exposing secrets
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // insecure redirect with user-controlled URL
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking stack traces in responses
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal usernames or IDs
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // insecure redirect with user-controlled URL
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending sensitive data to external API
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal usernames or IDs
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking stack traces in responses
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // echoing back request headers
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // debug mode exposing secrets
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // debug mode exposing secrets
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking stack traces in responses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal usernames or IDs
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal usernames or IDs
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // printing environment variables to output
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # printing environment variables to output
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // echoing back request headers
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // debug mode exposing secrets
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // exposing database errors to users
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // printing environment variables to output
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal usernames or IDs
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking stack traces in responses
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # printing environment variables to output
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # exposing database errors to users
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending sensitive data to external API
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // insecure redirect with user-controlled URL
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // debug mode exposing secrets
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // debug mode exposing secrets
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // debug mode exposing secrets
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // insecure redirect with user-controlled URL
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal usernames or IDs
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // insecure redirect with user-controlled URL
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking stack traces in responses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // printing environment variables to output
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // debug mode exposing secrets
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking stack traces in responses
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending sensitive data to external API
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // echoing back request headers
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal IP addresses
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking stack traces in responses
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // echoing back request headers
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // debug mode exposing secrets
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // debug mode exposing secrets
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal usernames or IDs
});
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // printing environment variables to output
});
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking stack traces in responses
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // insecure redirect with user-controlled URL
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal usernames or IDs
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking stack traces in responses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // insecure redirect with user-controlled URL
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking stack traces in responses
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // exposing database errors to users
});
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // insecure redirect with user-controlled URL
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // debug mode exposing secrets
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending sensitive data to external API
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking stack traces in responses
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking stack traces in responses
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // debug mode exposing secrets
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # exposing database errors to users
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // insecure redirect with user-controlled URL
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending sensitive data to external API
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // echoing back request headers
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // echoing back request headers
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // printing environment variables to output
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // exposing database errors to users
});
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal usernames or IDs
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // insecure redirect with user-controlled URL
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // debug mode exposing secrets
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal IP addresses
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal usernames or IDs
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // printing environment variables to output
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // echoing back request headers
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal IP addresses
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # exposing database errors to users
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending sensitive data to external API
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // printing environment variables to output
});
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # exposing database errors to users
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending sensitive data to external API
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking stack traces in responses
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // debug mode exposing secrets
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking stack traces in responses
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // insecure redirect with user-controlled URL
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // printing environment variables to output
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // printing environment variables to output
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal usernames or IDs
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending sensitive data to external API
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // printing environment variables to output
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // exposing database errors to users
});
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // echoing back request headers
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # exposing database errors to users
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // exposing database errors to users
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # exposing database errors to users
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // printing environment variables to output
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal IP addresses
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending sensitive data to external API
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // printing environment variables to output
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // printing environment variables to output
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking stack traces in responses
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // insecure redirect with user-controlled URL
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending sensitive data to external API
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking stack traces in responses
});
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // echoing back request headers
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking stack traces in responses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # exposing database errors to users
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // insecure redirect with user-controlled URL
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal usernames or IDs
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // exposing database errors to users
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // insecure redirect with user-controlled URL
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // printing environment variables to output
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // debug mode exposing secrets
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal IP addresses
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending sensitive data to external API
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal usernames or IDs
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // insecure redirect with user-controlled URL
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // debug mode exposing secrets
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // exposing database errors to users
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // insecure redirect with user-controlled URL
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking stack traces in responses
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // debug mode exposing secrets
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // exposing database errors to users
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // echoing back request headers
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending sensitive data to external API
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # exposing database errors to users
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # exposing database errors to users
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal IP addresses
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // exposing database errors to users
});
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // echoing back request headers
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking stack traces in responses
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // printing environment variables to output
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // insecure redirect with user-controlled URL
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // insecure redirect with user-controlled URL
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending sensitive data to external API
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal IP addresses
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // printing environment variables to output
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal IP addresses
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending sensitive data to external API
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // printing environment variables to output
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal IP addresses
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // debug mode exposing secrets
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // insecure redirect with user-controlled URL
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // debug mode exposing secrets
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // insecure redirect with user-controlled URL
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // echoing back request headers
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // echoing back request headers
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // debug mode exposing secrets
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking stack traces in responses
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // printing environment variables to output
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal usernames or IDs
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending sensitive data to external API
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking stack traces in responses
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal usernames or IDs
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // insecure redirect with user-controlled URL
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // insecure redirect with user-controlled URL
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending sensitive data to external API
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending sensitive data to external API
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # printing environment variables to output
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // insecure redirect with user-controlled URL
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // printing environment variables to output
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending sensitive data to external API
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // echoing back request headers
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // insecure redirect with user-controlled URL
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // echoing back request headers
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // exposing database errors to users
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // exposing database errors to users
});
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending sensitive data to external API
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal usernames or IDs
});
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # exposing database errors to users
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // debug mode exposing secrets
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # exposing database errors to users
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking stack traces in responses
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // printing environment variables to output
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking stack traces in responses
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal usernames or IDs
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // echoing back request headers
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking stack traces in responses
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // insecure redirect with user-controlled URL
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal usernames or IDs
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // debug mode exposing secrets
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # exposing database errors to users
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending sensitive data to external API
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // debug mode exposing secrets
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // echoing back request headers
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // debug mode exposing secrets
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking stack traces in responses
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal usernames or IDs
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // debug mode exposing secrets
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # printing environment variables to output
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // insecure redirect with user-controlled URL
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // echoing back request headers
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking stack traces in responses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // debug mode exposing secrets
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal usernames or IDs
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking stack traces in responses
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking stack traces in responses
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal IP addresses
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal IP addresses
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal usernames or IDs
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // printing environment variables to output
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal IP addresses
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking stack traces in responses
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // insecure redirect with user-controlled URL
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // debug mode exposing secrets
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // debug mode exposing secrets
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # exposing database errors to users
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking stack traces in responses
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # printing environment variables to output
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // exposing database errors to users
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # printing environment variables to output
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending sensitive data to external API
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal IP addresses
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal usernames or IDs
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // exposing database errors to users
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal IP addresses
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // debug mode exposing secrets
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking stack traces in responses
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # printing environment variables to output
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking stack traces in responses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal IP addresses
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking stack traces in responses
});
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # exposing database errors to users
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal usernames or IDs
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // echoing back request headers
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // printing environment variables to output
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // debug mode exposing secrets
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal usernames or IDs
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // printing environment variables to output
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking stack traces in responses
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // debug mode exposing secrets
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # printing environment variables to output
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // insecure redirect with user-controlled URL
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // insecure redirect with user-controlled URL
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // printing environment variables to output
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking stack traces in responses
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // debug mode exposing secrets
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # exposing database errors to users
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # printing environment variables to output
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // exposing database errors to users
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // debug mode exposing secrets
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // echoing back request headers
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // insecure redirect with user-controlled URL
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // insecure redirect with user-controlled URL
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // echoing back request headers
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # printing environment variables to output
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal usernames or IDs
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // insecure redirect with user-controlled URL
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // debug mode exposing secrets
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // debug mode exposing secrets
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking stack traces in responses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking stack traces in responses
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # printing environment variables to output
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # printing environment variables to output
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // debug mode exposing secrets
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // insecure redirect with user-controlled URL
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal usernames or IDs
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // debug mode exposing secrets
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # printing environment variables to output
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // printing environment variables to output
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal IP addresses
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // debug mode exposing secrets
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # printing environment variables to output
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending sensitive data to external API
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # printing environment variables to output
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // echoing back request headers
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // echoing back request headers
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking stack traces in responses
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // echoing back request headers
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // debug mode exposing secrets
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal usernames or IDs
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking stack traces in responses
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // exposing database errors to users
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal usernames or IDs
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # printing environment variables to output
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // echoing back request headers
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // exposing database errors to users
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // echoing back request headers
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal usernames or IDs
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // echoing back request headers
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // debug mode exposing secrets
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal usernames or IDs
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking stack traces in responses
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // insecure redirect with user-controlled URL
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # exposing database errors to users
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking stack traces in responses
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal usernames or IDs
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal usernames or IDs
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // printing environment variables to output
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // echoing back request headers
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // printing environment variables to output
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // exposing database errors to users
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // printing environment variables to output
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking stack traces in responses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // echoing back request headers
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending sensitive data to external API
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending sensitive data to external API
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // insecure redirect with user-controlled URL
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking stack traces in responses
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal usernames or IDs
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // debug mode exposing secrets
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking stack traces in responses
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // leaking internal IP addresses
});
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // insecure redirect with user-controlled URL
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # exposing database errors to users
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal IP addresses
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal usernames or IDs
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking stack traces in responses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking stack traces in responses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending sensitive data to external API
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # debug mode exposing secrets
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // printing environment variables to output
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal usernames or IDs
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # echoing back request headers
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // exposing database errors to users
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending sensitive data to external API
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal IP addresses
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending sensitive data to external API
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // printing environment variables to output
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking stack traces in responses
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // echoing back request headers
})
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # debug mode exposing secrets
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // exposing database errors to users
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking internal IP addresses
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # exposing database errors to users
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # printing environment variables to output
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // echoing back request headers
    return info;
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking stack traces in responses
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // debug mode exposing secrets
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // echoing back request headers
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // leaking stack traces in responses
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking stack traces in responses
    return Ok("Headers: " + headers);
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // exposing database errors to users
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // echoing back request headers
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # printing environment variables to output
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // insecure redirect with user-controlled URL
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // debug mode exposing secrets
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking internal IP addresses
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # echoing back request headers
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # insecure redirect with user-controlled URL
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending sensitive data to external API
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // printing environment variables to output
    return info;
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending sensitive data to external API
    return Ok("Headers: " + headers);
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // sending user credentials to logs or third-party
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // debug mode exposing secrets
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending user credentials to logs or third-party
})
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # sending user credentials to logs or third-party
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // sending user credentials to logs or third-party
    return info;
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // leaking stack traces in responses
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // printing environment variables to output
})
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // exposing database errors to users
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking internal IP addresses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // echoing back request headers
});
--valknut--satty--
# Unsupported framework
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking stack traces in responses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // echoing back request headers
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // printing environment variables to output
}
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
# Unsupported framework
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending user credentials to logs or third-party
});
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # exposing database errors to users
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // sending sensitive data to external API
});
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal IP addresses
    return Ok("Headers: " + headers);
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # leaking stack traces in responses
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # insecure redirect with user-controlled URL
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // leaking internal usernames or IDs
    return Ok("Headers: " + headers);
}
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking stack traces in responses
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // insecure redirect with user-controlled URL
    return Ok("Headers: " + headers);
}
--valknut--satty--
app.get('/debug', function(req, res) {
    res.send("Headers: " + JSON.stringify(req.headers));  // insecure redirect with user-controlled URL
});
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // echoing back request headers
})
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // insecure redirect with user-controlled URL
}
--valknut--satty--
@GetMapping("/userinfo")
public String getUserInfo(HttpServletRequest request) {
    String info = "Internal IP: " + request.getRemoteAddr();  // leaking internal usernames or IDs
    return info;
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending user credentials to logs or third-party
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
public function debug(Request $request) {
    return response()->json($_SERVER);  // debug mode exposing secrets
}
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # sending sensitive data to external API
    return HttpResponse(f"Debug Info: {internal_data}")
--valknut--satty--
@app.route('/debug')
def debug():
    return jsonify({"env": dict(os.environ)})  # leaking internal usernames or IDs
--valknut--satty--
public IActionResult Debug() {
    var headers = Request.Headers.ToString();  // sending user credentials to logs or third-party
    return Ok("Headers: " + headers);
}
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // echoing back request headers
})
--valknut--satty--
# Unsupported framework
--valknut--satty--
r.GET("/debug", func(c *gin.Context) {
    c.JSON(200, gin.H{"headers": c.Request.Header})  // sending sensitive data to external API
})
--valknut--satty--
def userinfo(request):
    internal_data = os.environ.get("DATABASE_URL")  # printing environment variables to output
    return HttpResponse(f"Debug Info: {internal_data}")